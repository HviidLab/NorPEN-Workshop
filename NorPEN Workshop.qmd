---
title: "Lets Play with Causal Meta-Learners"
author: Anders Hviid
date: November 18, 2024
format: 
  revealjs:
    footer: "Causal Meta-Learner Workshop"
    #logo: logo.png
    theme: serif
    transition: slide
    echo: false
    output: true
    chalkboard: true
slide-number: true    
---

## What are we going to do today?

## A Simple Example

<br> <br>

|             | Recovered | Not Recovered |
|-------------|-----------|---------------|
| **Treated** | 1500      | 1500          |
| **Control** | 1200      | 1800          |

<br>

Average Treatment Effect = 0.1 <br>

This does NOT imply lack of individual treatment effects!

## Heterogeneity of Treatment Effects

![](images/1-s2.0-S0002870324001145-gr3_lrg.jpg){fig-align="center"}

## Average Treatment Effect (ATE)

<br>

Formal Definition:

$$
\text{ATE} = E[Y_t - Y_{t'}] = P(y_t) - P(y_{t'})
$$ where:

\- $Y_t$ potential outcome under treatment

\- $Y_{t'}$ potential outcome under control

\- $P(y_t)$ probability of positive outcome under treatment

\- $P(y_{t'})$ probability of positive outcome under control

## NHEFS data

```{r}
#| label: load-packages
#| output: false
library(tidyverse)
library(causaldata)
library(tableone)
```

```{r}
glimpse(nhefs)
```

## A Table 1

```{r}


# Load the NHEFS dataset
data("nhefs")

# Define the variables to include in the table
vars <- c("age", "sex", "race", "education", "smokeintensity", "smokeyrs", "active", "wt71", "exercise")

# Create a Table 1 stratified by quitting smoking status (qsmk)
table1 <- CreateTableOne(vars = vars, strata = "qsmk", data = nhefs, factorVars = c("sex", "race", "education", "active", "exercise"))

# Print the Table 1
print(table1, showAllLevels = TRUE)
```

## A Table 2

<br><br>

```{r}


# Create a 2x2 table of the exposure (qsmk) and the outcome (death) with labels

table_2x2 <- table(nhefs$qsmk, nhefs$death)
dimnames(table_2x2) <- list("Quitting Smoking (qsmk)" = c("No", "Yes"), "Death" = c("No", "Yes"))

# Calculate the crude Average Treatment Effect (ATE)
n1 <- sum(nhefs$qsmk == 1)
n0 <- sum(nhefs$qsmk == 0)
y1_mean <- mean(nhefs$death[nhefs$qsmk == 1], na.rm = TRUE)
y0_mean <- mean(nhefs$death[nhefs$qsmk == 0], na.rm = TRUE)
crude_ate <- y1_mean - y0_mean

# Print the crude ATE
print(table_2x2)
print(paste("Crude ATE:", crude_ate))
```

## ATE using IPTW
```{r}
#| fig.height: 8
#| fig.width: 10
#| layout: [[1], [1]]

# Calculate IPTW weights
ps_model <- glm(qsmk ~ age + sex + race + as.factor(education) + smokeintensity + smokeyrs + as.factor(active) + wt71 + as.factor(exercise), 
                family = binomial(), data = nhefs)
nhefs$ps <- predict(ps_model, type = "response")
nhefs$iptw <- ifelse(nhefs$qsmk == 1, 1 / nhefs$ps, 1 / (1 - nhefs$ps))

# Set up plotting area for two plots
par(mfrow = c(2, 1))

# 1. Density plot of PS by treatment
plot(density(nhefs$ps[nhefs$qsmk == 1]), 
     main = "Propensity Score Distribution by Treatment",
     xlab = "Propensity Score",
     ylim = c(0, 4),
     col = "blue",
     lwd = 2)
lines(density(nhefs$ps[nhefs$qsmk == 0]), col = "red", lwd = 2)
legend("topright", 
       legend = c("Treated (Quit Smoking)", "Control (Continued Smoking)"),
       col = c("blue", "red"),
       lwd = 2)

# 2. Density plot of IPTW weights by treatment
plot(density(nhefs$iptw[nhefs$qsmk == 1]), 
     main = "IPTW Weight Distribution by Treatment",
     xlab = "IPTW Weight",
     ylim = c(0, 3),
     xlim = c(0, 15),
     col = "blue",
     lwd = 2)
lines(density(nhefs$iptw[nhefs$qsmk == 0]), col = "red", lwd = 2)
legend("topright", 
       legend = c("Treated (Quit Smoking)", "Control (Continued Smoking)"),
       col = c("blue", "red"),
       lwd = 2)

# Calculate and print ATE
treated_mean <- weighted.mean(nhefs$death[nhefs$qsmk == 1], nhefs$iptw[nhefs$qsmk == 1])
control_mean <- weighted.mean(nhefs$death[nhefs$qsmk == 0], nhefs$iptw[nhefs$qsmk == 0])
ATE <- treated_mean - control_mean
print(paste("IPTW ATE:", round(ATE, 4)))
```


## Potential Outcomes Framework

## HTEs

-   ATE

-   CATE - HTE

-   ITE - HTE

## S-Learner

## Implement S-Learner

## T-Learner

## Implement T-Learner

## X-Learner

## Implement X-Learner

## Bootstrap 95% CIs

## ML base learners

-   Penalised regression

-   Tree-based methods

-   Neural networks

## Overfitting

## Implement T-Learner with XGBoost

## CATE presentations

-   histogram

-   ranked ITEs with 95% CIs colored in

-   partial dependence plots

## What have we learned?
